
                                const canvas = document.getElementById('confetti-canvas');
const ctx = canvas.getContext('2d');
const largeHeart = document.getElementById('large-heart');
const clickMessage = document.getElementById('click-message');
const restartButton = document.getElementById('restart-button');

const confettiCount = 150;
const colors = ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#ff9800'];
const confetti = [];

const phrases = [
    "Tu risa, que ilumina mi día entero.",
    "La forma en que siempre me apoyas.",
    "Tu increíble paciencia conmigo.",
    "Cada pequeña sorpresa que me das.",
    "Simplemente, ser tú misma."
];
const finalPhraseText = "Te Amo";
const phraseDelay = 2500;
const phraseAnimationDuration = 1500;
const initialDelay = 500;
const finalExplosionDelay = 1000;

let currentPhraseIndex = 0;
let animationRunning = false;

function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
}

class ConfettiParticle {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.radius = Math.random() * 6 + 2;
        this.color = colors[Math.floor(Math.random() * colors.length)];
        this.angle = Math.random() * Math.PI * 2;
        this.speed = Math.random() * 5 + 2;
        this.friction = 0.97;
        this.gravity = 0.1;
        this.alpha = 1;
        this.decay = Math.random() * 0.015 + 0.005;
        this.vx = Math.cos(this.angle) * this.speed;
        this.vy = Math.sin(this.angle) * this.speed - 3;
    }

    update() {
        this.x += this.vx;
        this.y += this.vy;
        this.vx *= this.friction;
        this.vy += this.gravity;
        this.alpha -= this.decay;
    }

    draw() {
        ctx.save();
        ctx.globalAlpha = this.alpha;
        ctx.fillStyle = this.color;
        ctx.translate(this.x, this.y);
        ctx.beginPath();
        ctx.arc(0, 0, this.radius, 0, Math.PI * 2, false);
        ctx.fill();
        ctx.restore();
    }
}

function animateConfetti() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    for (let i = confetti.length - 1; i >= 0; i--) {
        const p = confetti[i];
        p.update();
        p.draw();
        if (p.alpha <= 0) {
            confetti.splice(i, 1);
        }
    }
    if (confetti.length > 0) {
        requestAnimationFrame(animateConfetti);
    }
}

function explode(targetElement) {
    const rect = targetElement.getBoundingClientRect();
    const originX = rect.left + rect.width / 2;
    const originY = rect.top + rect.height / 2;
    for (let i = 0; i < confettiCount; i++) {
        confetti.push(new ConfettiParticle(originX, originY));
    }

    targetElement.classList.add('exploded');
    if (confetti.length > 0) {
        animateConfetti();
    }
}

function createPhraseElement(text, isFinal = false) {
    const phraseDiv = document.createElement('div');
    phraseDiv.textContent = text;
    phraseDiv.classList.add('phrase-item');
    if (isFinal) {
        phraseDiv.id = 'te-amo-phrase';
    }

    const heartRect = largeHeart.getBoundingClientRect();
    phraseDiv.style.left = `${heartRect.left + heartRect.width / 2}px`;
    phraseDiv.style.top = `${heartRect.top + heartRect.height / 2}px`;

    document.body.appendChild(phraseDiv);
    return phraseDiv;
}

function showNextPhrase() {
    if (currentPhraseIndex < phrases.length) {
        const phraseDiv = createPhraseElement(phrases[currentPhraseIndex]);
        setTimeout(() => phraseDiv.classList.add('active'), 50);

        setTimeout(() => {
            phraseDiv.classList.add('fade-out');
            phraseDiv.addEventListener('transitionend', () => phraseDiv.remove(), { once: true });
        }, phraseAnimationDuration);

        currentPhraseIndex++;
        setTimeout(showNextPhrase, phraseDelay);
    } else {
        setTimeout(() => {
            explode(largeHeart);
            displayTeAmo();
        }, finalExplosionDelay);
    }
}

function displayTeAmo() {
    const teAmoDiv = createPhraseElement(finalPhraseText, true);
    const heartRect = largeHeart.getBoundingClientRect();

    teAmoDiv.style.left = `${heartRect.left + heartRect.width / 2}px`;
    teAmoDiv.style.top = `${heartRect.top + heartRect.height / 2}px`;
    teAmoDiv.style.transform = 'translateX(-50%) translateY(-50%) scale(0.5)';

    setTimeout(() => {
        teAmoDiv.classList.add('visible');

        setTimeout(() => {
            restartButton.classList.add('visible');
            animationRunning = false;
        }, 1000);
    }, 100);
}

function startAnimation() {
    if (animationRunning) return;
    animationRunning = true;

    clickMessage.classList.add('hidden');
    setTimeout(showNextPhrase, initialDelay);
}


function resetAnimation() {

    restartButton.classList.remove('visible');

    const phrasesToRemove = document.querySelectorAll('.phrase-item, #te-amo-phrase');
    phrasesToRemove.forEach(el => el.remove());

    largeHeart.classList.remove('exploded');

    clickMessage.classList.remove('hidden');

    currentPhraseIndex = 0;

    largeHeart.addEventListener('click', startAnimation, { once: true });

    confetti.length = 0;
    ctx.clearRect(0,0, canvas.width, canvas.height);
}

resizeCanvas();
window.addEventListener('resize', resizeCanvas);

largeHeart.addEventListener('click', startAnimation, { once: true });

restartButton.addEventListener('click', resetAnimation);

const particlesCanvas = document.getElementById('background-particles-canvas');
const particlesCtx = particlesCanvas.getContext('2d');
let particlesArray;

function resizeParticlesCanvas() {
    particlesCanvas.width = window.innerWidth;
    particlesCanvas.height = window.innerHeight;
}

class Particle {
    constructor() {
        this.x = Math.random() * particlesCanvas.width;
        this.y = Math.random() * particlesCanvas.height;
        this.size = Math.random() * 4 + 1;
        this.speedY = Math.random() * 0.5 + 0.1;
        this.speedX = (Math.random() * 1 - 0.5);
    }
    update() {
        this.y -= this.speedY;
        this.x += this.speedX;
        if (this.y < 0) {
            this.y = particlesCanvas.height + this.size;
            this.x = Math.random() * particlesCanvas.width;
        }
        if (this.x < 0 || this.x > particlesCanvas.width) {
            this.speedX = -this.speedX;
        }
    }
    draw() {
        particlesCtx.fillStyle = 'rgba(255, 255, 255, 0.5)';
        particlesCtx.beginPath();
        particlesCtx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        particlesCtx.fill();
    }
}

function initParticles() {
    particlesArray = [];
    const numberOfParticles = 70;
    for (let i = 0; i < numberOfParticles; i++) {
        particlesArray.push(new Particle());
    }
}

function animateParticles() {
    particlesCtx.clearRect(0, 0, particlesCanvas.width, particlesCanvas.height);
    for (let i = 0; i < particlesArray.length; i++) {
        particlesArray[i].update();
        particlesArray[i].draw();
    }
    requestAnimationFrame(animateParticles);
}

resizeParticlesCanvas();
initParticles();
animateParticles();

window.addEventListener('resize', () => {
    resizeParticlesCanvas();
    initParticles();
});
                            